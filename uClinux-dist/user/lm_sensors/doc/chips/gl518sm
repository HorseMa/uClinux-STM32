Kernel driver `gl518sm.o'
=========================

Status: Complete and well-tested

Supported chips:
  * Genesys Logic GL518SM release 0x00
    Prefix: 'gl518sm'
    Addresses scanned: I2C 0x2c and 0x2d
    Datasheet: http://www.genesyslogic.com/pdf
  * Genesys Logic GL518SM release 0x80
    Prefix: 'gl518sm'
    Addresses scanned: I2C 0x2c and 0x2d
    Datasheet: http://www.genesyslogic.com/pdf

Author: Frodo Looijaard <frodol@dds.nl>,
        Kyösti Mälkki <kmalkki@cc.hut.fi>


Module Parameters
-----------------

* force: short array (min = 1, max = 48)
  List of adapter,address pairs to boldly assume to be present
* force_gl518sm_r00: short array (min = 1, max = 48)
  List of adapter,address pairs which are unquestionably assumed to contain
  a `gl518sm_r00' chip
* force_gl518sm_r80: short array (min = 1, max = 48)
  List of adapter,address pairs which are unquestionably assumed to contain
  a `gl518sm_r80' chip
* ignore: short array (min = 1, max = 48)
  List of adapter,address pairs not to scan
* ignore_range: short array (min = 1, max = 48)
  List of adapter,start-addr,end-addr triples not to scan
* probe: short array (min = 1, max = 48)
  List of adapter,address pairs to scan additionally
* probe_range: short array (min = 1, max = 48)
  List of adapter,start-addr,end-addr triples to scan additionally

Description
-----------

IMPORTANT: For the revision 0x00 chip, the
           in0, in1, and in2 values (+5, +3, and +12) CANNOT be read
           unless you use the slow 'iterate' method. Limits will still
           work even when iterate=0. See below. This is a limitation
           of the chip, not the driver.
           Note that the 'iterate' method was trimmed while porting the
           driver to Linux 2.6 as we considered it too ugly for the thin
           benefit.
	   

This driver supports the Genesys Logic GL518SM chip. There are at least
two revision of this chip, which we call revision 0x00 and 0x80. Revision
0x80 chips support the reading of voltages directly, 0x00 only for VIN3.

The GL518SM implements one temperature sensor, two fan rotation speed
sensors, and four voltage sensors. It can report alarms through the
computer speakers.

Temperatures are measured in degrees Celsius. An alarm goes off while the
temperature is above the over temperature limit, and has not yet dropped
below the hysteresis limit. The alarm always reflects the current situation.
Measurements are guaranteed between -10 degrees and +110 degrees, with
a resolution of +-3 degrees.

Fan rotation speeds are reported in RPM (rotations per minute). An alarm is
triggered if the rotation speed has dropped below a programmable limit.
In case when you have selected to turn Fan1 off, no Fan1 alarm is triggered.

Fan readings can be divided by a programmable divider (1, 2, 4 or 8) to give
the readings more range or accuracy. Not all RPM values can accurately be
represented, so some rounding is done. With a divider of 2, the lowest
representable value is around 1900 RPM.

Voltage sensors (also known as VIN sensors) report their values in volts. An
alarm is triggered if the voltage has crossed a programmable minimum or
maximum limit. Note that minimum in this case always means 'closest to
zero'; this is important for negative voltage measurements. The VDD input
measures voltages between 0.000 and 5.865 volt, with a resolution of 0.023
volt. The other inputs measure voltages between 0.000 and 4.845 volt, with a
resolution of 0.019 volt. Note that revision 0x00 chips do not support
reading the current voltage of any input except for VIN3; limit setting and
alarms work fine, though. There is code to compute them by iterating.

When an alarm goes off, you can be warned by a beeping signal through
your computer speaker. It is possible to enable all beeping globally,
or only the beeping for some alarms.

If an alarm triggers, it will remain triggered until the hardware register
is read at least once (except for temperature alarms). This means that the 
cause for the alarm may already have disappeared!  Note that in the current 
implementation, all hardware registers are read whenever any data is read 
(unless it is less than 1.5 seconds since the last update). This means that 
you can easily miss once-only alarms.

The GL518SM only updates its values each 1.5 seconds; reading it more often
will do no harm, but will return 'old' values.

Iteration Code
--------------

IMPORTANT: For the revision 0x00 chip only,
you may select between three modes to read the vin0-2 inputs with
the following lines in /etc/sensors.conf:

 set iterate 0    Don't read in0-in2 inputs.
 set iterate 1    Run the iteration loop, this takes up to 10 seconds.
 set iterate 2    Show the results of the last iteration loop,
                  and start a new loop to run in the background.

You may also set the iteration type with
'echo n > /proc/sys/dev/sensors/gl518sm-i2c-x-y/iterate'.

If you have a rev 0x80 chip, the in0-in2 inputs are readable.
In this case, 'iterate' will be read-only and the read value is 3.

This does NOT apply to the Linux 2.6 kernel driver, where the 'iteration'
code was dropped for being too ugly.


Chip Features
-------------

Chip `gl518sm'
             LABEL        LABEL CLASS      COMPUTE CLASS ACCESS MAGNITUDE
               vdd               NONE               NONE     R     2
              vin1               NONE               NONE     R     2
              vin2               NONE               NONE     R     2
              vin3               NONE               NONE     R     2
           vdd_min                vdd                vdd     RW    2
          vin1_min               vin1               vin1     RW    2
          vin2_min               vin2               vin2     RW    2
          vin3_min               vin3               vin3     RW    2
           vdd_max                vdd                vdd     RW    2
          vin1_max               vin1               vin1     RW    2
          vin2_max               vin2               vin2     RW    2
          vin3_max               vin3               vin3     RW    2
              fan1               NONE               NONE     R     0
              fan2               NONE               NONE     R     0
          fan1_min               fan1               fan1     RW    0
          fan2_min               fan2               fan2     RW    0
              temp               NONE               NONE     R     1
         temp_hyst               temp               temp     RW    1
         temp_over               temp               temp     RW    1
          fan1_div               fan1               NONE     RW    0
          fan2_div               fan2               NONE     RW    0
            alarms               NONE               NONE     R     0
       beep_enable             alarms               NONE     RW    0
             beeps             alarms             alarms     RW    0
          fan1_off               NONE               NONE     RW    0
      fan1_off_pin               NONE               NONE     RW    0
           iterate               NONE               NONE     RW    0


             LABEL                        FEATURE SYMBOL        SYSCTL FILE:NR
               vdd                    SENSORS_GL518_VDD                vdd:3
              vin1                   SENSORS_GL518_VIN1               vin1:3
              vin2                   SENSORS_GL518_VIN2               vin2:3
              vin3                   SENSORS_GL518_VIN3               vin3:3
           vdd_min                SENSORS_GL518_VDD_MIN                vdd:1
          vin1_min               SENSORS_GL518_VIN1_MIN               vin1:1
          vin2_min               SENSORS_GL518_VIN2_MIN               vin2:1
          vin3_min               SENSORS_GL518_VIN3_MIN               vin3:1
           vdd_max                SENSORS_GL518_VDD_MAX                vdd:2
          vin1_max               SENSORS_GL518_VIN1_MAX               vin1:2
          vin2_max               SENSORS_GL518_VIN2_MAX               vin2:2
          vin3_max               SENSORS_GL518_VIN3_MAX               vin3:2
              fan1                   SENSORS_GL518_FAN1               fan1:2
              fan2                   SENSORS_GL518_FAN2               fan2:2
          fan1_min               SENSORS_GL518_FAN1_MIN               fan1:1
          fan2_min               SENSORS_GL518_FAN2_MIN               fan2:1
              temp                   SENSORS_GL518_TEMP               temp:3
         temp_hyst              SENSORS_GL518_TEMP_HYST               temp:2
         temp_over              SENSORS_GL518_TEMP_OVER               temp:1
          fan1_div               SENSORS_GL518_FAN1_DIV            fan_div:1
          fan2_div               SENSORS_GL518_FAN2_DIV            fan_div:2
            alarms                 SENSORS_GL518_ALARMS             alarms:1
       beep_enable            SENSORS_GL518_BEEP_ENABLE               beep:1
             beeps                  SENSORS_GL518_BEEPS               beep:2
          fan1_off                SENSORS_GL518_FAN1OFF            fan1off:1
      fan1_off_pin                SENSORS_GL518_FAN1PIN            fan1off:2
           iterate                SENSORS_GL518_ITERATE            iterate:1

