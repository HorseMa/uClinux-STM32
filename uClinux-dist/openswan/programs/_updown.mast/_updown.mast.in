#! /bin/sh
# iproute2 version, default updown script
#
# Copyright (C) 2003-2004 Nigel Metheringham
# Copyright (C) 2002-2007 Michael Richardson <mcr@xelerance.com>
# Copyright (C) 2003-2005 Tuomo Soini <tis@foobar.fi>
# Copyright (C) 2008 Paul Wouters <paul@xelerance.com>
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.



# CAUTION:  Installing a new version of Openswan will install a new
# copy of this script, wiping out any custom changes you make.  If
# you need changes, make a copy of this under another name, and customize
# that, and use the (left/right)updown= parameters in ipsec.conf to make
# Openswan use yours instead of this default one.

LC_ALL=C export LC_ALL

# things that this script gets (from ipsec_pluto(8) man page)
#
#
#      PLUTO_VERSION
#              indicates  what  version of this interface is being
#              used.  This document describes version  1.1.   This
#              is upwardly compatible with version 1.0.
#
#       PLUTO_VERB
#              specifies the name of the operation to be performed
#              (prepare-host, prepare-client, up-host, up-client,
#              down-host, or down-client).  If the address family
#              for security gateway to security gateway communications
#              is IPv6, then a suffix of -v6 is added to the
#              verb.
#
#       PLUTO_CONNECTION
#              is the name of the  connection  for  which  we  are
#              routing.
#
#       PLUTO_CONN_POLICY
#              the policy of the connection, as in:
#     RSASIG+ENCRYPT+TUNNEL+PFS+DONTREKEY+OPPORTUNISTIC+failureDROP+lKOD+rKOD  
#
#       PLUTO_NEXT_HOP
#              is the next hop to which packets bound for the peer
#              must be sent.
#
#       PLUTO_INTERFACE
#              is the name of the ipsec interface to be used.
#
#       PLUTO_ME
#              is the IP address of our host.
#
#       PLUTO_MY_CLIENT
#              is the IP address / count of our client subnet.  If
#              the  client  is  just  the  host,  this will be the
#              host's own IP address / max (where max  is  32  for
#              IPv4 and 128 for IPv6).
#
#       PLUTO_MY_CLIENT_NET
#              is the IP address of our client net.  If the client
#              is just the host, this will be the  host's  own  IP
#              address.
#
#       PLUTO_MY_CLIENT_MASK
#              is  the  mask for our client net.  If the client is
#              just the host, this will be 255.255.255.255.
#
#       PLUTO_MY_SOURCEIP
#              if non-empty, then the source address for the route will be
#              set to this IP address.
#
#       PLUTO_MY_PROTOCOL
#              is the protocol  for this  connection.  Useful  for
#              firewalling.
#
#       PLUTO_MY_PORT
#              is the port. Useful for firewalling.
#
#       PLUTO_PEER
#              is the IP address of our peer.
#
#       PLUTO_PEER_CLIENT
#              is the IP address / count of the peer's client subnet.
#              If the client is just the peer, this will be
#              the peer's own IP address / max (where  max  is  32
#              for IPv4 and 128 for IPv6).
#
#       PLUTO_PEER_CLIENT_NET
#              is the IP address of the peer's client net.  If the
#              client is just the peer, this will  be  the  peer's
#              own IP address.
#
#       PLUTO_PEER_CLIENT_MASK
#              is  the  mask  for  the  peer's client net.  If the
#              client   is   just   the   peer,   this   will   be
#              255.255.255.255.
#
#       PLUTO_PEER_PROTOCOL
#              is  the  protocol  set  for  remote  end  with port
#              selector.
#
#       PLUTO_PEER_PORT
#              is the peer's port. Useful for firewalling.
#
#       PLUTO_CONNECTION_TYPE
#
#	PLUTO_STACK
#		IPsec stack used by pluto (eg protostack= values)

# for debugging of the script
#exec >/tmp/_updown.m$$
#exec 2>&1
#set -x

# Import default _updown configs from the /etc/sysconfig/pluto_updown file
#
# Two variables can be set in this file:
#
#       DEFAULTSOURCE
#              is the default value for PLUTO_MY_SOURCEIP
#
#       IPROUTEARGS
#              is the extra argument list for ip route command
#
#       IPRULEARGS
#              is the extra argument list for ip rule command
#
if [ -f /etc/sysconfig/pluto_updown ]
then
    . /etc/sysconfig/pluto_updown
fi

# check interface version
case "$PLUTO_VERSION" in
1.*)	# Older Pluto?!?  Play it safe, script may be using new features.
	echo "$0: obsolete interface version \`$PLUTO_VERSION'," >&2
	echo "$0: 	called by obsolete Pluto?" >&2
	exit 2
	;;
2.*)	;;
*)	echo "$0: unknown interface version \`$PLUTO_VERSION'" >&2
	exit 2
	;;
esac

# check parameter(s)
case "$1:$*" in
':')			# no parameters
	;;
custom:*)		# custom parameters (see above CAUTION comment)
	;;
*)	echo "$0: unknown parameters \`$*'" >&2
	exit 2
	;;
esac

# function to see if iptables has an IPSEC chain already, and if not,
# it will create one and insert it into the OUTPUT and FORWARD chains.
checkipsec() {
    # first look for IPSEC chain.
    if iptables -n -L IPSEC -t mangle >/dev/null 2>&1
    then
	: it is okay. found it.
    else
	iptables -t mangle -N IPSEC

	# we will assume that if no IPsec chain exists, that there
	# is also no advanced routing added yet.
	# we pick table 50, cause proto50=ESP
	# note "fwmarkmask" is an Openswan patch to "ip" command.
	# note2: iproute2-2.6.22-070710 supports mask via /mask notation instead
	# ip rule add fwmark 0x80000000/0x80000000 table 50
	# ip rule add fwmark 0x80000000 fwmarkmask 0x80000000 table 50
	ip rule add fwmark 0x80000000 fwmarkmask 0x80000000 table 50
	ip route add 0.0.0.0/0 dev $PLUTO_INTERFACE table 50
    fi

    # now look for -j IPSEC in OUTPUT chains.
    if (iptables -n -t mangle -L OUTPUT | grep -q '^IPSEC')
    then
	: found it
    else
	iptables -t mangle -I OUTPUT 1 -j IPSEC
	iptables -t mangle -I OUTPUT 1 -p udp --sport 500 -j ACCEPT
	iptables -t mangle -I OUTPUT 1 -p udp --dport 500 -j ACCEPT
	iptables -t mangle -I OUTPUT 1 -p udp --sport 4500 -j ACCEPT
	iptables -t mangle -I OUTPUT 1 -p udp --dport 4500 -j ACCEPT
    fi

    # now look for -j IPSEC in PREROUTING chains.
    if (iptables -n -t mangle -L PREROUTING | grep -q '^IPSEC')
    then
	: found it
    else
	iptables -A PREROUTING -t mangle -j IPSEC
    fi

    
}

# utility functions for route manipulation

# called to add appropriate "erout'ing"
uproute() {
	checkipsec
	doipsecrule add
	ip route flush cache
}

# called to remove any routing
downroute() {
	checkipsec
	doipsecrule delete
	ip route flush cache
}

# called XXXX
uprule() {
	doipsecrule delete
	doipsecrule add
	ip route flush cache
}

# called XXXX
downrule() {
	doipsecrule delete
}

addsource() {
	st=0
	#
	# Fix for Bug #66215 to solve SNAT/MASQUERADE problems with recent
	# 2.6.x kernels.
	# Instead of a /32 it seems better to use the netmask of the remote
	# (peer) network for the sourceip as suggested by Patrick McHardy.
	#
	cidr=${PLUTO_PEER_CLIENT##*/}
	snet=${PLUTO_MY_SOURCEIP%/*}/32
	if test "${PLUTO_PEER_CLIENT}" != "${cidr}"
	then
		snet=${PLUTO_MY_SOURCEIP%/*}/${cidr}
	fi
	if ! ip addr show dev ${PLUTO_INTERFACE%:*} | grep -qs "inet ${snet}"
	then
		it="ip addr add ${snet} dev ${PLUTO_INTERFACE%:*}"

	    oops="`eval $it 2>&1`"
	    st=$?
	    if test " $oops" = " " -a " $st" != " 0"
	    then
		oops="silent error, exit status $st"
	    fi
	    case "$oops" in
		'RTNETLINK answers: File exists'*)
		# should not happen, but ... ignore if the
		# address was already assigned on interface
		oops=""
		st=0
	    ;;
	    esac
	    if test " $oops" != " " -o " $st" != " 0"
	    then
		echo "$0: addsource \`$it' failed ($oops)" >&2
	    fi
	fi
	return $st
}

# WARNING: changesource might not work as expected with mast
changesource() {
	st=0
	parms="$PLUTO_PEER_CLIENT"
	parms2="dev $PLUTO_INTERFACE"
	parms3="src ${PLUTO_MY_SOURCEIP%/*}" 
	if [ -n "$IPROUTETABLE" ]
	then
	    parms3="$parms3 table $IPROUTETABLE"
	fi
	cmd=add
	if ! ip -o route get ${PLUTO_MY_SOURCEIP%/*} | grep mast0
	then
	    cmd=change
	fi
	it="ip route $cmd $parms $parms2 $parms3"
 	case "$PLUTO_PEER_CLIENT" in
 	"0.0.0.0/0")
		# opportunistic encryption work around
		it=
 		;;
 	esac
	oops="`eval $it 2>&1`"
 	st=$?
	if test " $oops" = " " -a " $st" != " 0"
 	then
	    oops="silent error, exit status $st"
	fi
	if test " $oops" != " " -o " $st" != " 0"
	then
	    echo "$0: changesource \`$it' failed ($oops)" >&2
 	fi
 	return $st
}

# the purpose of this command is to add an entry to the IPSEC chain in
# the iptables system. It grabs the right packets and does a --set-mark
# on them. An advanced routing rule then directs the packets to the
# appropriate device with the right mark. 
#
# This is not be done for OE packets --- they are supposed to get a
# new netfilter module instead.
doipsecrule() {

	saref=$PLUTO_PEER_REF
	nf_saref=$(printf "%d" $(( ($saref * 65536) | 0x80000000 )))

	srcnet=$PLUTO_MY_CLIENT_NET/$PLUTO_MY_CLIENT_MASK
	dstnet=$PLUTO_PEER_CLIENT_NET/$PLUTO_PEER_CLIENT_MASK

	#echo SAref: $saref '->' $nf_saref

	case $1 in
	    add) it="iptables -I IPSEC 1 -t mangle --src $srcnet --dst $dstnet -j MARK --set-mark $nf_saref";;

            delete) it="iptables -D IPSEC -t mangle --src $srcnet --dst $dstnet -j MARK --set-mark $nf_saref";;
        esac

	oops="`set +x; eval $it 2>&1`"
	st=$?
	if test " $oops" = " " -a " $st" != " 0"
	then
	    oops="silent error, exit status $st"
	fi
	if test " $oops" != " " -o " $st" != " 0"
	then
	    echo "$0: doroute \`$it' failed ($oops)" >&2
	fi
	return $st
}
 

# the big choice
case "$PLUTO_VERB:$1" in
spdadd-client:*|spdadd-host:*)
	checkipsec;
	doipsecrule add;;

spddel-client:*|spddel-host:*)
	checkipsec
	doipsecrule delete;;

prepare-host:*|prepare-client:*)
	# set up a "%trap" equivalent (we don't know how do this yet!)
	;;

route-host:*|route-client:*)
	# connection to me or my client subnet being routed
	# setup of %TRAP equivalent
	;;

unroute-host:*|unroute-client:*)
	# connection to me or my client subnet being unrouted
	# remove %TRAP equivalent
	;;

up-host:*)
	# If you are doing a custom version, firewall commands go here.
	;;

down-host:*)
	# If you are doing a custom version, firewall commands go here.
	;;

up-client:)
	# If you are doing a custom version, firewall commands go here.
	;;

down-client:)
	# If you are doing a custom version, firewall commands go here.
	;;

#
# IPv6
#
prepare-host-v6:*|prepare-client-v6:*)
	;;
route-host-v6:*|route-client-v6:*)
	# connection to me or my client subnet being routed
	#uproute_v6
	;;
unroute-host-v6:*|unroute-client-v6:*)
	# connection to me or my client subnet being unrouted
	#downroute_v6
	;;
up-host-v6:*)
	# connection to me coming up
	# If you are doing a custom version, firewall commands go here.
	;;
down-host-v6:*)
	# connection to me going down
	# If you are doing a custom version, firewall commands go here.
	;;
up-client-v6:)
	# connection to my client subnet coming up
	# If you are doing a custom version, firewall commands go here.
	;;
down-client-v6:)
	# connection to my client subnet going down
	# If you are doing a custom version, firewall commands go here.
	;;
*)	echo "$0: unknown verb \`$PLUTO_VERB' or parameter \`$1'" >&2
	exit 1
	;;
esac
